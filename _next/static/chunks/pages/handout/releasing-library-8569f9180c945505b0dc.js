_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{WklR:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/handout/releasing-library",function(){return t("bFH0")}])},bFH0:function(e,n,t){"use strict";t.r(n),t.d(n,"meta",(function(){return b})),t.d(n,"default",(function(){return u}));var r=t("rePB"),o=t("Ff2n"),i=(t("q1tI"),t("7ljp")),a=t("LRTk");function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){Object(r.a)(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}var b={title:"Releasing the library"},c={meta:b},p=a.a;function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)(p,s(s(s({},c),t),{},{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"All the components are coded? Before you bring them to the product,\nlet's reelease the library."),Object(i.b)("p",null,"Do not forget that we serve design tokens and the library of components as different\npackages. However, it is good to keep them synced and always release the tokens when\nyou are releasing the library."),Object(i.b)("h3",null,"Release the tokens"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{}),"yarn tokens:version\n")),Object(i.b)("p",null,"The release script will build the tokens, increment the version and commit the\nresult of the build. If you want to check beforehand that the build is not broken,\nrun ",Object(i.b)("inlineCode",{parentName:"p"},"tokens:build"),"."),Object(i.b)("h3",null,"Upgrade the tokens version in the library"),Object(i.b)("p",null,"Go to package.json of your design system (",Object(i.b)("inlineCode",{parentName:"p"},"design-system/package.json"),") and change the\nversion of the library:"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{className:"language-diff"}),'  "dependencies": {\n-   "tokens": "0.1.0", \n+   "tokens": "0.2.0",\n  ...\n  }\n\n')),Object(i.b)("h3",null,"Release the library"),Object(i.b)("p",null,"When the tokens are updated, all the changes are commited,\nyou can release your library:"),Object(i.b)("pre",null,Object(i.b)("code",s({parentName:"pre"},{}),"yarn design-system:version\n")),Object(i.b)("p",null,"Similarly to the process with tokens, you will be prompted to type a version.\nAlongside with incrementing the version, this command builds the library and\ncommits the result to the repository. If you want to check beforehand that the\nbuild goes normally, run ",Object(i.b)("inlineCode",{parentName:"p"},"yarn design-system:build"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Now you can use the new library version in the product.")),Object(i.b)("h3",null,"Additional information"),Object(i.b)("p",null,"When releasing the tokens or the library, you can run the command with one of\nthe flags: ",Object(i.b)("inlineCode",{parentName:"p"},"--patch"),", ",Object(i.b)("inlineCode",{parentName:"p"},"--minor"),", ",Object(i.b)("inlineCode",{parentName:"p"},"--major"),". They will fill the coresponding\nversion number accordingly."),Object(i.b)("h3",null,"Why we are keeping dist in the repo?"),Object(i.b)("p",null,"When we are building the tokens or the library, their minified prduction-ready versions\nare  created in ",Object(i.b)("inlineCode",{parentName:"p"},"tokens/dist")," and ",Object(i.b)("inlineCode",{parentName:"p"},"design-system/dist")," folders.\nNormally, such folders would not be a part of your repository. You would keep them inside the\nnpm packages. But in the workshop, we keep it simple: you sync with your other\nteam members by commiting the compiled files into the reposiitory."))}u.isMDXComponent=!0}},[["WklR",0,1,2,3]]]);